#!/usr/bin/perl -w

use strict;
use DBI;
use Getopt::Long;
use Term::ANSIColor;
use Time::Piece;
use Frontier::Client;
use Data::Dumper;


my $database = "t4skr_lister";
my $oerpServer = "localhost";
my $oerpPass = "nimda";
my $oerpUser = "admin";
my @transfer;
my @who;
my $full_message;
my $history;
my $discharge;
           

GetOptions('database=s' => \$database,
           'server=s' => \$oerpServer,
           'user=s' => \$oerpUser,
           'password=s' => \$oerpPass,
           'transfer=s{1,2}' => \@transfer,
           'who=s{2}' => \@who,
           'discharge' => \$discharge,
           'verbose' => \$full_message,
           'history' => \$history);

if(@who){
	my $hid = showBed($who[0], $who[1]);
	getOdooStatus($hid);
}
else {
	my $hospital_number = shift @ARGV;
	usage() && exit(1) unless $hospital_number;

	my @ids = getMatchingPatients($hospital_number);

	for my $i (@ids){
		if(@transfer){
			transferPatient($hospital_number, $transfer[0], $transfer[1])
		}
		elsif($history){
			history($i);
		}elsif($discharge){
			discharge($hospital_number);	
		}

		getOdooStatus($i);
	}
}

sub usage {
	print "Usage: ./pxinfo [HOSPITAL_NUMBER] [ARGS]\n\n";
	print "\t-h, --history\t\t\t\tshow the history of a patient\n";
	print "\t-v, --verbose\t\t\t\tshow verbose history (full message)\n";
	print "\t-w, --who <ward_reference> <bed_name>\tquery who is occupying a bed\n";
	print "\t-t, --transfer <ward_reference>\t\ttransfer patient to ward\n";
	print "\t-d, --discharge <visit_number>\t\tdischarge patient\n";
	print "\nExamples:\n\tpxinfo D12345\t\t\t\t--show visit information for patient\n";
	print "\tpxinfo D12345 -h -v \t\t\t--show visit information with full history\n";
	print "\tpxinfo D12345 -transfer EFMB \t\t--transfer patient to EFMB ward\n";
	print "\tpxinfo VISITNUM123 -discharge \t\t--transfer patient to EFMB ward\n";
	print "\n\n";

}

sub showBed {
	my $ward = shift;
	my $bed_name = shift;
	my $server_url = "http://$oerpServer:8069/xmlrpc/object";
	my $server = Frontier::Client->new(url => $server_url);
	my $wardID =  $server->call('execute', $database, 1, $oerpPass, 't4clinical.pos.delivery', 'search', [['reference', '=', $ward]]);	
	if(!@$wardID) {
		print "Unable to find ward with identifier $ward\n";
		exit(1);
	}
	my $sproj_id = $server->call('execute', $database, 1, $oerpPass, 't4clinical.pos.delivery', 'search', [['parent_id', '=', @$wardID[0]],['name', '=', $bed_name]]);	
	if(!@$sproj_id){
		print "Unable to find bed with name $bed_name in ward $ward\n";
		exit(1);
	}
	my $proj_id = $server->call('execute', $database, 1, $oerpPass, 't4clinical.pos.delivery', 'read', @$sproj_id[0], ['occupants']);	
	my $occupant_id = $proj_id->{'occupants'};
	if(!@$occupant_id){
		print "$bed_name in $ward is unoccupied\n";
		exit(0);
	}
	
	my $visit_id = $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient.visit', 'search', [['project_id', '=', $proj_id->{'occupants'}[0]]]);
	my $pat_id = $server->call('execute',$database, 1, $oerpPass, 't4clinical.patient.visit', 'read', $visit_id, ['patient_id']);
	my $name = (@$pat_id[0])->{'patient_id'}[1];	
	my $pid = @$pat_id[0]->{'patient_id'}[0];
	my $hnum = $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'read', $pid, ['other_identifier']);
	print "$bed_name in ward $ward is occupied by $name ($hnum->{'other_identifier'})\n";
}


sub discharge {
	my $hospital_number = shift;
	my $t = localtime;

	my $server_url = "http://$oerpServer:8069/xmlrpc/object";
	my $server = Frontier::Client->new(url => $server_url);
	$server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'patientDischarge', $hospital_number,$t->datetime);
}
	

sub transferPatient{
	my ($hospital_number, $wardRef, $bedName) = (@_);

	my $server_url = "http://$oerpServer:8069/xmlrpc/object";
	my $server = Frontier::Client->new(url => $server_url);
	my $transfer;

	if(!defined $bedName){
		$transfer = $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'patientTransfer', $hospital_number,$wardRef);
	}
	else {
		$transfer = $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'patientTransfer', $hospital_number,$wardRef, {bed => $bedName});
	}
}

sub getMatchingPatients{

	my $hospital_number = shift;
	my $server_url = "http://$oerpServer:8069/xmlrpc/object";
	my $server = Frontier::Client->new(url => $server_url);
	my $readName = 	$server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'search', [['other_identifier', 'ilike', $hospital_number]]);
	my $patientNames = $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'read', [@$readName], ['other_identifier']);
    my @patient_oids;
    for my $i (@$patientNames){
        push @patient_oids, $i->{'other_identifier'};
    }
    return @patient_oids;
}


sub getOdooStatus{

	my $hn = shift;

	my $server_url = "http://$oerpServer:8069/xmlrpc/object";
	my $server = Frontier::Client->new(url => $server_url);
	my $readName = 	  $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'search', [['other_identifier', '=', $hn]]);
	my $patientNames = $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient', 'read', [@$readName], ['name','other_identifier','id']);
	for my $i (0 .. @$patientNames -1)
	{
		my $a = @$patientNames[$i];
		my %n = %$a;
		my $pid = $n{'id'};
		my $oid = $n{'other_identifier'};

		my $search = $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient.visit', 'search', [['patient_id', '=', $pid]]) || die ("Call failed");
		my @ids = @$search;
		print "$n{'name'} ($oid) has ". @ids ." visits:\n";
		if(@ids gt 0) {
			my $read = 	  $server->call('execute', $database, 1, $oerpPass, 't4clinical.patient.visit', 'read',[@ids], ['pos_location', 'pos_location_parent', 'state', 'visit_end', 'visit_start', 'name', 'other_identifier', 'patient_name']) || die ("Read failed");
			for my $i (0 .. @$read -1)
			{
				my $z = @$read[$i];
				my %h = %$z;
				my $matchOI = $h{'other_identifier'};
				my $loc = $h{'pos_location'};
				my $ploc = $h{'pos_location_parent'};
				my $state = $h{'state'};
				my $name = $h{'name'};
				my $start = $h{'visit_start'};
				my $end = $h{'visit_end'};
 				my $parent = ((ref($ploc) eq 'ARRAY') ? @$ploc[1] : "undefined");

				print "\tVisit ID #$i: ";
				print color("magenta"), "$name\n", color("reset");
				print "\tVisit is in state ";
				print color("red"), "$state\n", color("reset");
				print "\tVisit started on ";
				print color("cyan"), "$start\n", color("reset");
				if(ref($loc) eq 'ARRAY'){
					print "\tPatient is in ";
					print color("green"), "@$loc[1] in $parent\n", color("reset");
				}	
				if($state eq 'close'){
					print "\tVisit ended on ";
					print color("cyan"), "$end\n", color("reset");
				}
			}
		}
	}
}

	
sub history{

    my $hn = shift;
    print "History: \n\n";

	my $conn = DBI->connect("dbi:Pg:dbname=t4adt", "t4adt", "t4adt");

	my $successQuery = $conn->prepare(
			"SELECT timestamp,type,data,id,visit_id,hospital_number" .
			" FROM msg_history" .
			" WHERE hospital_number = '$hn'"
			);


	my $failQuery = $conn->prepare(
			"SELECT timestamp,type,exception,data,id,visit_id,hospital_number" .
			" FROM fail_msg_history" .
			" WHERE hospital_number = '$hn'" 
			);

	$successQuery->execute();
	$failQuery->execute();

	my $posresults = $successQuery->fetchall_arrayref();
	my $negresults = $failQuery->fetchall_arrayref();

	my @mergeresults;

	for my $row (@$posresults) {
		my @fields = @$row;
	 	push(@mergeresults, [$fields[0],$fields[1], "", $fields[2],$fields[3], $fields[4],$fields[5]]);
	};

	for my $row (@$negresults) {
		my @fields = @$row;
		push(@mergeresults, [@fields]);
	};

	my @sorted = sort { $a->[0] <=> $b->[0] } @mergeresults;

	for my $result (@sorted) {
		my @r = @$result;
        my $timestamp = Time::Piece->strptime("$r[0]", "%Y%m%d%H%M%S");
        my $type = $r[1];
		my $exception = $r[2];
		my $data = $r[3];
	$data =~ m/PV1\|(.*?\|){44}(.*?)[^0-9.+]/g;
	my $discharge_date = $2;
	if (!defined $discharge_date){
		$discharge_date = "";
}
        my $visit_id = $r[5];
		$exception =~ s/\R/ /g;
		$data =~ s/\r//g;
        print color("blue"), "$timestamp", color("reset");
        print " - ";
        print color("green"), "$type", color("reset");
        print " - ";
        print color("black"), "$discharge_date", color("reset");
        print " - ";
        print color("magenta"), "$visit_id", color("reset");
        print " - ";
        print color("red"), "$exception\n", color("reset");
        if(defined $full_message){
            print "Full message:";
			print "$data\n";
		}
	
	};
}
